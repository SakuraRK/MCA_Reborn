plugins {
    id 'java-library'
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply false
    id "io.github.pacifistmc.forgix" version "1.2.9"
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

def getAppVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        println "Warning: ${e.message}, is git installed?"
        return "dev"
    }
} as Object

allprojects {
    apply plugin: "maven-publish"

    group = rootProject.group
    description = rootProject.displayname
    archivesBaseName = rootProject.name
    version = getAppVersion()
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        implementation 'com.google.code.findbugs:jsr305:3.0.2'
    }

    build.finalizedBy(mergeJars)
    assemble.finalizedBy(mergeJars)

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    publishing {
        repositories {
            maven {
                name = "reposiliteRepository"
                url = uri("https://maven.conczin.net/Artifacts")
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_TOKEN")
                }
            }
        }
    }
}

forgix {
    group = rootProject.groupId
    mergedJarName = "${rootProject.name}-${rootProject.version}-universal.jar"
    outputDir = "build/libs"

    forge {
        jarLocation = "build/libs/${rootProject.name}-${rootProject.version}-forge.jar"
        mixin "mca.mixin.json"
    }

    fabric {
        jarLocation = "build/libs/${rootProject.name}-${rootProject.version}-fabric.jar"
    }

    quilt {
        jarLocation = "build/libs/${rootProject.name}-${rootProject.version}-quilt.jar"
    }
}